#define _USE_MATH_DEFINES

#include <string.h>
#include <math.h>
#include <stdio.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <iostream>

#include <stdio.h>
#include <stdlib.h>

//部屋の広さ コアルーム 8.34*6.79
#define ROOM_H 6.79
#define ROOM_W 8.34
#define ROOM_CX 16.68
#define ROOM_CY 13.58

//WINDOW SIZE
#define WINDOW_H (ROOM_H*100)
#define WINDOW_W (ROOM_W*100)

//映像サイズ
#define RICOH_W 3860
#define RICOH_H 1830

#define LineMax 30

//カメラの設置の高さ(m)
#define c_z 2.5 * 2//高さ
#define c_y 6.29 * 2 //縦
#define c_x 5.84 * 2//横

#define deg_to_rad(deg) (((deg)/360)*2*M_PI)

double room(double width, double height) {
	double room = (ROOM_W / ROOM_H) * (WINDOW_H * 0.6);
	return room;
}

double rad_trans(double rad) {
	if (0 <= rad && rad < 90)rad = 180 - rad;
	if (90 <= rad && rad < 180)rad = 180 - rad;
	if (180 <= rad && rad < 360)rad = -rad;
	return rad;
}

double bounty_size(double leftx, double rightx, double height, double ave[((int)(ROOM_CY + 0.5)) - 1][((int)(ROOM_CX + 0.5)) - 1], int c) {

	//leftx = leftx - 915;
	//rightx = rightx - 915;

	double w_rate[12] = { 0.0 };

	/* バウンティボックスと距離 */
	//バウンティボックスサイズと距離の関係
	//double w_range[12] = { 63.64,59.36,55.09,50.82,46.55,42.27,38,33.73,29.45,25.18,29.45 };
	//double h_range[12] = { 54.29,53,51.72,50.43,49.15,47.86,46.58,45.29,44,42.72,44 };
	double w_range[12] = { 185.3,181.49,177.68,173.87,170.06,166.25,162.44,158.63,154.82,151.01,147.2,143.3 }; //元データ
	double h_range[12] = { 251,248.19,245.38,242.57,239.76,236.95,234.14,231.33,228.52,225.71,222.9,220 }; //元データ
	

	double h_rate[12] = { 0.0 };
	double room_point_sw[((int)(ROOM_CY + 0.5)) - 1][((int)(ROOM_CX + 0.5)) - 1] = { 0.0 }; //バウンティボックスサイズの大きさからの確率
	double room_point_sh[((int)(ROOM_CY + 0.5)) - 1][((int)(ROOM_CX + 0.5)) - 1] = { 0.0 }; //バウンティボックスサイズの大きさからの確率
	double room_point_r[((int)(ROOM_CY + 0.5)) - 1][((int)(ROOM_CX + 0.5)) - 1] = { 0.0 }; //角度からの確率
	double room_point_ave[((int)(ROOM_CY + 0.5)) - 1][((int)(ROOM_CX + 0.5)) - 1] = { 0.0 }; //角度からの確率
	//double room_point_p[((int)(ROOM_CY + 0.5)) - 1][((int)(ROOM_CX + 0.5)) - 1] = { 0.0 }; //部屋の大きさ
	double width = rightx - leftx;
	double rad_l = (leftx * 360) / 3860;
	double rad_r = (rightx * 360) / 3860;
	double rad_q = (rad_l + rad_r) / 2;
	int tmp1, tmp2 = 0;
	double p1, p2 = 0.0;
	int rangex = 0, range_nx = 0;
	int room_x = ((int)(ROOM_CX + 0.5)) - 1;
	int room_y = ((int)(ROOM_CY + 0.5)) - 1;



	if (ROOM_W < ROOM_H) {
		tmp1 = ((int)(ROOM_CY + 0.5)) - 1;
		tmp2 = ((int)(ROOM_CX + 0.5)) - 1;
	}
	else {
		tmp1 = ((int)(ROOM_CX + 0.5)) - 1;
		tmp2 = ((int)(ROOM_CY + 0.5)) - 1;
	}

	///*カメラの位置 -1 */
	//room_point_sw[(int)(c_y * 2.0 + 0.5) - 1][(int)(c_x * 2.0 + 0.5) - 1] = { -1 };
	//room_point_sh[(int)(c_y * 2.0 + 0.5) - 1][(int)(c_x * 2.0 + 0.5) - 1] = { -1 };
	//room_point_r[(int)(c_y * 2.0 + 0.5) - 1][(int)(c_x * 2.0 + 0.5) - 1] = { -1 };
	////room_point_r[(int)(c_y * 2.0 + 0.5) - 1][(int)(c_x * 2.0 + 0.5) - 1] = { -1 };

	for (int j = 0; j < 12; j++) {
		//確率の格納
		//w_rate[j] = width / w_range[j]; //確率w
		//h_rate[j] = height / h_range[j]; //確率h
		//if (1 < w_rate[j])w_rate[j] = w_range[j] / width;
		//if (1 < h_rate[j])h_rate[j] = h_range[j] / height;
		//0709 変更点
		w_rate[j] = ( /* w_rate[j] + */ (width / w_range[j])) / c; //確率w
		h_rate[j] = ( /* h_rate[j] + */ (height / h_range[j])) / c; //確率h
		if (1 < w_rate[j])w_rate[j] = ( /* w_rate[j] + */ (w_range[j] / width)) / c;
		if (1 < h_rate[j])h_rate[j] = ( /* h_rate[j] + */ (h_range[j] / height)) / c;

	}

	/* バウンティボックスサイズの大きさからの確率 */
	for (int j = 0; j < room_x; j++) {
		for (int k = 0; k < room_y; k++) {
			//(x-x0)^2 + (y-y0)^2 = r^2
			rangex = (int)(sqrt((pow((c_x - (double)j), 2.0) + pow(c_y - (double)k, 2))));
			//printf("(double)j + c_x %lf\n", (double)j + c_x);
			//printf("pow1 %lf\n", pow((j + c_x), 2.0));

			printf("sq %lf\n", sqrt((pow((c_x - (double)j), 2.0) + pow(c_y - (double)k, 2))));
			printf("rangex = %d\n", rangex);
			if (0 <= rangex && rangex < 1)range_nx = 0;
			if (1 < rangex && rangex <= 2)range_nx = 1;
			if (2 < rangex && rangex <= 3)range_nx = 2;
			if (3 < rangex && rangex <= 4)range_nx = 3;
			if (4 < rangex && rangex <= 5)range_nx = 4;
			if (5 < rangex && rangex <= 6)range_nx = 5;
			if (6 < rangex && rangex <= 7)range_nx = 6;
			if (7 < rangex && rangex <= 8)range_nx = 7;
			if (8 < rangex && rangex <= 9)range_nx = 8;
			if (9 < rangex && rangex <= 10)range_nx = 9;
			if (10 < rangex)range_nx = 10;
			//printf("range_n %d\n",range_n);
			/*if (room_point_sw[k][j] == 0.0)*/ //room_point_sw[k][j] = w_rate[range_nx];
			/*if (room_point_sh[k][j] == 0.0)*/ //room_point_sh[k][j] = h_rate[range_nx];

			//0709 変更点
			room_point_sw[k][j] = ( /*room_point_sw[k][j] + */w_rate[range_nx]);
			room_point_sh[k][j] = ( /*room_point_sw[k][j] + */h_rate[range_nx]);
		}
	}

	/* 角度からの確率 */
	double radian = 0.0;
	double degree = 0.0;
	for (int j = 0; j < (room_x); j++) {//x
		for (int k = 0; k < room_y; k++) {//y
			degree = atan2(c_y - k, c_x - j) * 180 / M_PI;
			//0709　変更ナシ
			room_point_r[k][j] = degree / rad_q;
			room_point_r[k][j] = degree / rad_q;
			if (1 < room_point_r[k][j])room_point_r[k][j] = rad_q / degree;
			if (1 < room_point_r[k][j])room_point_r[k][j] = degree / rad_q;
			//rad_l;
		}
	}



	/*--------------------------------------表示---------------------------------------------*/
	printf("sw\n");
	for (int j = 0; j < tmp2; j++) {//縦
		for (int k = 0; k < tmp1; k++) {//横
			/*if (j == (int)(tmp1))printf("\n");*/
			//printf("k = %d\n",k);
			//printf("%d\n",(int)(tmp1 * ROOM_D));
			printf(" %1.1lf ", room_point_sw[j][k]);
			if (k == 15)printf("\n");
		}
	}

	printf("\n\n");
	printf("r\n");
	/*--------------------------------------表示---------------------------------------------*/
	for (int j = 0; j < tmp2; j++) {//縦
		for (int k = 0; k < tmp1; k++) {//横
			/*if (j == (int)(tmp1))printf("\n");*/
			//printf("k = %d\n",k);
			//printf("%d\n",(int)(tmp1 * ROOM_D));
			printf(" %1.1lf ", room_point_r[j][k]);
			if (k == 15)printf("\n");
		}
	}

	printf("\n\n");
	printf("sh\n");
	for (int j = 0; j < tmp2; j++) {//縦
		for (int k = 0; k < tmp1; k++) {//横
			/*if (j == (int)(tmp1))printf("\n");*/
			//printf("k = %d\n",k);
			//printf("%d\n",(int)(tmp1 * ROOM_D));
			printf(" %1.1lf ", room_point_sh[j][k]);
			if (k == 15)printf("\n");
		}
	}
	printf("\n\n");
	printf("output\n");
	for (int j = 0; j < tmp2; j++) {//縦
		for (int k = 0; k < tmp1; k++) {//横
			room_point_ave[j][k] = (room_point_sw[j][k] * room_point_sh[j][k] * room_point_r[j][k]);
			printf(" %1.1lf ", room_point_ave[j][k]);
			ave[j][k] = room_point_ave[j][k];
			if (k == 15)printf("\n");
		}
	}
	return 0;
}

int main()
{
	FILE* fp3 = NULL;
	char output[] = "output.txt";
	//fopen_s(&fp3, output, "a");
	FILE* fp1 = NULL; // FILE型構造体 読み込む方
	FILE* fp4 = NULL;
	char max[] = "max.txt";
	double max_n = 0.0;
	int max_x = 0, max_y = 0;
	fopen_s(&fp4, max, "a");
	char fname1[256];
	int person_num[35] = {};
	double left_x[15] = {}, right_x[15] = {}, height[15] = {};
	char readline1[LineMax] = {};
	char delim[] = ", "; //区切り文字
	char* ctx = NULL;
	char* tp1;
	int i = 0;
	int counter_m = 0;
	double ave[((int)(ROOM_CY + 0.5))][((int)(ROOM_CX + 0.5)) - 1] = {};
	double ave_total[((int)(ROOM_CY + 0.5))][((int)(ROOM_CX + 0.5)) - 1] = {1.0};
	errno_t error;

	error = fopen_s(&fp3, output, "a");

	printf("読み込むテキストファイル名を入力してください\n");
	gets_s(fname1, 256);
	fopen_s(&fp1, fname1, "r");

	if (fp1 == NULL) {
		printf("ファイルを開くことが出来ません。\n");
		return -1;
	}

	int tmp1 = 0, tmp2 = 0;

	if (ROOM_W < ROOM_H) {
		tmp1 = ((int)(ROOM_CY + 0.5)) - 1;
		tmp2 = ((int)(ROOM_CX + 0.5)) - 1;
	}
	else {
		tmp1 = ((int)(ROOM_CX + 0.5)) - 1;
		tmp2 = ((int)(ROOM_CY + 0.5)) - 1;
	}

	int counter = 0;
	/*--------------------------------------------------------------------------------------------------------------------- */
	while (fgets(readline1, sizeof(readline1), fp1) != NULL) {
		int flame_counter;//フレーム管理
		for (i = 0;; i++) {
			flame_counter = 0;
			printf("i = %d\n", i);
			puts(readline1);

			person_num[30] = {};
			int x, y = 0;
			left_x[14] = {}, right_x[14] = {}, height[14] = {};
			//取り出すのは人数、left_x、right_x、height

			/*1回目：ナンバー*/
			tp1 = readline1;
			tp1 = strtok_s(readline1, delim, &ctx);
			person_num[i] = atoi(tp1);
			if (person_num[i] == -1) {
				flame_counter = 0;
				break;
			}
			printf("%d\n", person_num[i]);

			/*2回目：x座標(左)*/
			tp1 = strtok_s(NULL, delim, &ctx);
			//puts(tp1);
			left_x[i] = atof(tp1);
			printf("%0.2lf\n", left_x[i]);

			/*3回目：x座標(右)*/
			tp1 = strtok_s(NULL, delim, &ctx);
			//puts(tp1);
			right_x[i] = atof(tp1);
			printf("%0.2lf\n", right_x[i]);

			/*4回目：高さ*/
			tp1 = strtok_s(NULL, delim, &ctx);
			//puts(tp1);
			height[i] = atof(tp1);
			printf("%0.2lf\n", height[i]);
			flame_counter++;
			bounty_size(left_x[i], right_x[i], height[i], ave, flame_counter); //おくるところ
			//printf("here");

			for (int j = 0; j < tmp2; j++) {//縦
				for (int k = 0; k < tmp1; k++) {//横

					ave_total[j][k] = ave_total[j][k] * ave[j][k];
					//ave_total[j][k] = ( ave_total[j][k] + ave[j][k] )/2 ;

				}
			}

			//fprintf(fp3," %1.1lf ",ave);

			///*古　確率分布表*/
			//for (int j = 0; j < tmp2; j++) {//縦
			//	for (int k = 0; k < tmp1; k++) {//横
			//		//0710 変更点
			//		//閾値を0.4に仮設定
			//		//if (ave[j][k] < 0.4)ave[j][k] = 0.0;

			//		fprintf(fp3, " %0.2lf ", ave[j][k]);

			//		if (k == 15) {
			//			fprintf(fp3, "\n");
			//		}
			//		if (j == 18) {
			//			fprintf(fp3, "\n");
			//		}

			//	}
			//}


			//for (int j = 0; j < tmp2; j++) {//縦
			//	for (int k = 0; k < tmp1; k++) {//横

			//		fprintf(fp3,"%d %d ",k+1,j+1);
			//		fprintf(fp3, " %0.2lf\n ", ave[j][k]);
			//	}
			//}

			max_n = 0.0;
			for (int j = 0; j < tmp2; j++) {
				for (int k = 0; k < tmp1; k++) {
					if (max_n < ave[j][k]) {
						max_n = ave[j][k];
						max_x = j;
						max_y = k;
					}
				}
			}

			/* 確率分布表 */
			for (int j = 0; j < tmp2; j++) {
				for (int k = 0; k < tmp1; k++) {
					if (j == max_x && k == max_y) {
						//fprintf(fp4, " %0.2lf ", max_n);
						fprintf(fp4, "%d %d\n", k + 1, j + 1);
					}
					else {
						//fprintf(fp4, " 0.0 ");
					}
					if (k == 15) {
						//fprintf(fp4, "\n");
					}
					if (j == 18) {
						//fprintf(fp4, "\n");
					}
					if (counter == 50)printf("\n\n");

				}
			}
			
			/*確率分布表ここまで*/

			counter++;
			fprintf(fp3, "\n\n");
			//fprintf(fp4, "\n\n");
			fgets(readline1, sizeof(readline1), fp1);
		}
		//1フレーム切れるごとにここを通る
		//printf("1-frame");

		/*新　確率分布表*/
		for (int j = 0; j < tmp2; j++) {//縦
			for (int k = 0; k < tmp1; k++) {//横
				//0710 変更点
				//閾値を0.4に仮設定
				//if (ave[j][k] < 0.4)ave[j][k] = 0.0;

				fprintf(fp3, " %0.2lf ", ave_total[j][k]);

				if (k == 15) {
					fprintf(fp3, "\n");
				}
				if (j == 18) {
					fprintf(fp3, "\n");
				}

			}
		}
	}

	fclose(fp1);
	fclose(fp3);
	fclose(fp4);

	return 0;
}
